{"version":3,"file":"eviltypes.bundle.js","mappings":";iCACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCClFV,EAAyBC,IACH,oBAAXa,QAA0BA,OAAOC,aAC1CV,OAAOC,eAAeL,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DX,OAAOC,eAAeL,EAAS,aAAc,CAAEe,OAAO,WCFhD,SAASC,EAA6CC,GACzD,IAAIC,EAEJ,IAEI,IADmBD,IAEf,MAAME,MAAM,mBAAmBF,IACvC,CAAE,MAAOG,GACLF,EAAME,EACNF,EAAMC,MAAM,mBAChB,CAEA,OAAOD,CACX,CCdO,SAASG,EACSC,EACOC,GAE5BP,GAAgB,IAAMM,EAASE,YAAYC,OAASF,EAAKE,MAC7D,mLCLO,MAAMC,EAKTC,WAMAC,MAAQ,CAAC,EAMTC,OAAS,KAGT,GAAAC,CAAyBf,GAIrB,OAHAgB,KAAKC,OAAOjB,GAEZgB,KAAKF,OAASd,EACPgB,IACX,CAMA,GAAAxB,GACI,OAAOwB,KAAKF,MAChB,CAGA,MAAAG,CAA4BjB,GACxBM,EAAoBN,EAAOgB,KAAKJ,WACpC,ECtCG,MAAM,UAAeD,EACxBC,WAAaM,OAEb,MAAAD,CAA6BjB,GACzB,QAASA,CACb,ECJG,SAASiB,EAAoCf,GAChD,MAAMC,EAAMF,EAAgBC,GAC5B,GAAIC,EAAK,CACL,MAAMgB,GAAa,IAAK,GAAUJ,IAAIZ,GACtC,GAAIiB,oBAEA,YADAC,QAAQC,MAAMH,GAIlB,MAAMA,CACV,CACJ,CCTO,SAASI,EACShB,EACOC,GAE5B,MAAML,EAAMG,EAAoBC,EAAUC,GAC1C,OAAOL,GAAM,IAAIqB,QAAST,IAAIZ,QAAOsB,CACzC,CCTO,MAAMC,UAAqBf,EAK9BC,WAAae,QCLV,MAAMC,UAAmBjB,EAK5BC,WAAaiB,OCJV,MAAMC,UAAqBnB,EAK9BC,WAAaiB,OAGb,MAAAZ,CAA6BjB,GACzBiB,GAAO,IAAMY,OAAOE,UAAU/B,KAC9BiB,GAAO,IAAMjB,GAAS,GAC1B,ECZG,MAAMgC,UAAkBrB,EAK3BC,WAAa,KCLV,MAAMqB,UAAoBtB,EAK7BC,WAAavB,OCLV,MAAM6C,UAAoBvB,EAK7BC,WAAaM","sources":["webpack://eviltypes/webpack/bootstrap","webpack://eviltypes/webpack/runtime/define property getters","webpack://eviltypes/webpack/runtime/hasOwnProperty shorthand","webpack://eviltypes/webpack/runtime/make namespace object","webpack://eviltypes/./src/utils/assertPrimitive.js","webpack://eviltypes/./src/utils/assertTypePrimitive.js","webpack://eviltypes/./src/types/TBase.js","webpack://eviltypes/./src/types/TError.js","webpack://eviltypes/./src/assert.js","webpack://eviltypes/./src/assertType.js","webpack://eviltypes/./src/types/TBaseBoolean.js","webpack://eviltypes/./src/types/TBaseFloat.js","webpack://eviltypes/./src/types/TBaseInteger.js","webpack://eviltypes/./src/types/TBaseNull.js","webpack://eviltypes/./src/types/TBaseObject.js","webpack://eviltypes/./src/types/TBaseString.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @returns {Error}\n */\nexport function assertPrimitive(/** @type {() => Boolean} */ testFn) {\n    let err;\n\n    try {\n        const isTestPass = testFn();\n        if (!isTestPass)\n            throw Error(`Assert failure: ${testFn}`);\n    } catch (_err) {\n        err = _err;\n        err = Error(`[ASSERT FAILURE]`);\n    }\n\n    return err;\n}\n","import { assertPrimitive } from './assertPrimitive';\n\nexport function assertTypePrimitive(\n    /** @type {TBase} */ instance,\n    /** @type {typeof TBase} */ type,\n) {\n    assertPrimitive(() => instance.constructor.name === type.name);\n}\n\n\n","import { assertTypePrimitive } from \"../utils/assertTypePrimitive\";\n\nexport class TBase {\n    /** \n     * @abstract\n     * @type {typeof TBase}\n     */\n    _primitive;\n\n    /**\n     * @abstract\n     * @type {Record<string, new (...args: TBase[]) => TBase>}\n     */\n    types = {};\n\n    /**\n     * @abstract\n     * @type {any} \n     */\n    _value = null;\n\n    /** @final */\n    set(/** @type {TBase} */ value) {\n        this.assert(value);\n\n        this._value = value;\n        return this;\n    }\n\n    /** \n     * @final\n     * @returns {TBase}\n     */\n    get() {\n        return this._value;\n    }\n\n    /** @abstract */\n    assert(/** @type {TBase} */ value) {\n        assertTypePrimitive(value, this._primitive);\n    }\n}","import { TBase } from \"./TBase\";\n\nexport class TError extends TBase {\n    _primitive = String;\n\n    assert(/** @type {string} */ value) {\n        return !!value;\n    }\n}","import { TError } from \"./types/TError\";\nimport { assertPrimitive } from \"./utils/assertPrimitive\";\n\nexport function assert(/** @type {() => Boolean} */ testFn) {\n    const err = assertPrimitive(testFn);\n    if (err) {\n        const errToThrow = (new TError()).set(err);\n        if (__DEV_DEBUG_TESTS__) {\n            console.error(errToThrow);\n            return;\n        }\n\n        throw errToThrow;\n    }\n}","import { assertTypePrimitive } from './utils/assertTypePrimitive';\n\n/**\n * @returns {TError}\n */\nexport function assertType(\n    /** @type {TBase} */ instance,\n    /** @type {typeof TBase} */ type,\n) {\n    const err = assertTypePrimitive(instance, type);\n    return err ? new TError().set(err) : undefined;\n}\n","import { TBase } from \"./TBase\";\n\nexport class TBaseBoolean extends TBase {\n    /** \n     * @override\n     * @type {typeof Boolean} \n     */\n    _primitive = Boolean;\n}","import { TBase } from \"./TBase\";\n\nexport class TBaseFloat extends TBase {\n    /** \n     * @override\n     * @type {typeof Number} \n     */\n    _primitive = Number;\n}","import { assert } from \"../assert\";\nimport { TBase } from \"./TBase\";\n\nexport class TBaseInteger extends TBase {\n    /** \n     * @override\n     * @type {typeof Number} \n     */\n    _primitive = Number;\n\n    /** @override */\n    assert(/** @type {Number} */ value) {\n        assert(() => Number.isInteger(value));\n        assert(() => value > -1);\n    }\n}","import { TBase } from \"./TBase\";\n\nexport class TBaseNull extends TBase {\n    /** \n     * @override\n     * @type {null} \n     */\n    _primitive = null;\n}","import { TBase } from \"./TBase\";\n\nexport class TBaseObject extends TBase {\n    /** \n     * @override\n     * @type {typeof Object} \n     */\n    _primitive = Object;\n}","import { TBase } from \"./TBase\";\n\nexport class TBaseString extends TBase {\n    /** \n     * @override\n     * @type {typeof String} \n     */\n    _primitive = String;\n}"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","assertPrimitive","testFn","err","Error","_err","assertTypePrimitive","instance","type","constructor","name","TBase","_primitive","types","_value","set","this","assert","String","errToThrow","__DEV_DEBUG_TESTS__","console","error","assertType","TError","undefined","TBaseBoolean","Boolean","TBaseFloat","Number","TBaseInteger","isInteger","TBaseNull","TBaseObject","TBaseString"],"sourceRoot":""}