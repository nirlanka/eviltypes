{"version":3,"file":"eviltypes.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAwC;AACkB;;AAE1D;AACA,aAAa;AACb;AACO;AACP,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,cAAc;AAC7B;AACA,gBAAgB,uEAAe;AAC/B,qBAAqB,iDAAM,2BAA2B,IAAI;AAC1D;;;;;;;;;;;;;;;ACbkE;;AAElE;AACA,aAAa;AACb;AACO;AACP,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,gBAAgB,+EAAmB;AACnC,sDAAsD,IAAI;AAC1D;;;;;;;;;;;;;;;;;ACX2D;AACQ;;AAE5D;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA,QAAQ,uEAAe;AACvB;AACA;AACA;AACA;AACA,QAAQ,uEAAe;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,uEAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,+EAAmB;AACnC;AACA;;AAEA,QAAQ,uEAAe;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;;AAEA;AACA,mBAAmB,KAAK;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,KAAK;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,sBAAsB,KAAK;AAC3B;AACA;AACA;;;;;;;;;;;;;;;ACvFgC;;AAEzB,qBAAqB,yCAAK;AACjC;;AAEA,sBAAsB,QAAQ;AAC9B;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA,aAAa;AACb;AACO;AACP,eAAe,eAAe;AAC9B,eAAe,QAAQ;AACvB,eAAe,cAAc;AAC7B;AACA;;AAEA;AACA;AACA;AACA,+CAA+C,WAAW,uBAAuB,yCAAyC;AAC1H,MAAM;AACN;AACA,0CAA0C,IAAI;AAC9C;;AAEA;AACA;;;;;;;;;;;;;;;;ACpBoD;;AAE7C;AACP,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB;AACA,IAAI,iEAAe;AACnB;AACA;AACA;AACA;AACA;;;;;;;;;UCXA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;ACNyB;AACI;;AAEC","sources":["webpack://eviltypes/./src/assert.js","webpack://eviltypes/./src/assertType.js","webpack://eviltypes/./src/types/TBase.js","webpack://eviltypes/./src/types/TError.js","webpack://eviltypes/./src/utils/assertPrimitive.js","webpack://eviltypes/./src/utils/assertTypePrimitive.js","webpack://eviltypes/webpack/bootstrap","webpack://eviltypes/webpack/runtime/define property getters","webpack://eviltypes/webpack/runtime/hasOwnProperty shorthand","webpack://eviltypes/webpack/runtime/make namespace object","webpack://eviltypes/./src/index.js"],"sourcesContent":["import { TError } from \"./types/TError\";\nimport { assertPrimitive } from \"./utils/assertPrimitive\";\n\n/**\n * @returns {TError}\n */\nexport function assert(\n    /** @type {() => boolean} */ testFn,\n    /** @type {string} */ textOnFail,\n    /** @type {Array|Object} */ values,\n) {\n    const err = assertPrimitive(testFn, textOnFail, values);\n    return err ? new TError().set(`[ASSERT FAILURE] ${err}`) : undefined;\n}","import { assertTypePrimitive } from './utils/assertTypePrimitive';\n\n/**\n * @returns {TError}\n */\nexport function assertType(\n    /** @type {TBase} */ instance,\n    /** @type {class} */ type,\n) {\n    const err = assertTypePrimitive(instance, type);\n    return err ? new TError().set(`[ASSERT FAILURE] ${err}`) : undefined;\n}\n","import { assertPrimitive } from \"../utils/assertPrimitive\";\nimport { assertTypePrimitive } from \"../utils/assertTypePrimitive\";\n\nexport class TBase {\n    static _PRIMITIVES = [\n        'number',\n        'string',\n        'object',\n        'function',\n    ];\n\n    /** \n     * @abstract\n     * @type {string}\n     * Underlying primitive data type\n     */\n    primitive;\n\n    /**\n     * @type {Record<string, new (...args: any[]) => TBase<any>>}\n     */\n    types;\n\n    _validate() {\n        assertPrimitive(\n            () => TBase._PRIMITIVES.some(x => x === this.primitive),\n            \"a valid primitive type name [EvilTypes]\",\n            [this.primitive]\n        );\n        assertPrimitive(\n            () => (this._value !== undefined)\n                ? (typeof this._value === this.primitive)\n                : true,\n            \"a valid primitive type value [EvilTypes]\",\n            [this._value, this.primitive]\n        );\n\n        if (this.primitive === 'object') {\n            assertPrimitive(\n                () =>\n                    (typeof this.types === 'object')\n                    && Object.keys(this.types).every(k => typeof k === 'string')\n                    && Object.values(this.types).every(v => typeof v === 'function'),\n                \"a valid typed object\",\n                [this.types, this.primitive]\n            );\n\n            for (const k in this.types) {\n                assertTypePrimitive(this._value[k], this.types[k]);\n            }\n        }\n\n        assertPrimitive(\n            () => this.assert(this._value),\n            \"a valid value [EvilTypes]\",\n            [this._value],\n        );\n    }\n\n    /**\n     * @type {any} \n     */\n    _value;\n\n    /** @final */\n    set(/** @type {any} */ v) {\n        this._value = v;\n        this._validate();\n        return this;\n    }\n\n    /** \n     * @final\n     * @returns {any} reference to the stored primitive value\n     */\n    get() {\n        this._validate();\n        return this._value;\n    }\n\n    /**\n     * @abstract \n     * @returns {boolean}\n     */\n    assert(/** @type {any} */ value) {\n        return true;\n    }\n}","import { TBase } from \"./TBase\";\n\nexport class TError extends TBase {\n    primitive = 'string';\n\n    assert(/** @type {string} */ value) {\n        return !!value;\n    }\n}","/**\n * @returns {Error}\n */\nexport function assertPrimitive(\n    /** @type {() => boolean} */ testFn,\n    /** @type {string} */ textOnFail,\n    /** @type {Array|Object} */ values,\n) {\n    let err;\n\n    try {\n        const isTestPass = testFn();\n        if (!isTestPass)\n            throw Error(`Assert failure: NOT ${textOnFail}, with debug values: ${values ? JSON.stringify(values) : testFn}`);\n    } catch (_err) {\n        err = _err;\n        console.error(`[ASSERT FAILURE] ${err}`);\n    }\n\n    return err;\n}\n","import { assertPrimitive } from './assertPrimitive';\n\nexport function assertTypePrimitive(\n    /** @type {object} */ instance,\n    /** @type {class} */ type,\n) {\n    assertPrimitive(\n        () => instance.constructor.name === type.name,\n        \"the same type as expected [EvilTypes]\",\n        [instance, type]\n    );\n}\n\n\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export * from './assert';\nexport * from './assertType';\n\nexport * from './types/TBase';\nexport * from './types/TError';"],"names":[],"sourceRoot":""}