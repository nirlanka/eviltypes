{"version":3,"file":"eviltypes.tests.bundle.js","mappings":"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","sources":["webpack://eviltypes/./src/utils/assertPrimitive.js","webpack://eviltypes/./src/types/TBase.js","webpack://eviltypes/./src/utils/assertTypePrimitive.js","webpack://eviltypes/./src/types/TError.js","webpack://eviltypes/./src/assert.js","webpack://eviltypes/./tests/assert-tests.js","webpack://eviltypes/./src/types/TBaseInteger.js","webpack://eviltypes/./src/types/TBaseString.js","webpack://eviltypes/./src/types/TBaseObject.js","webpack://eviltypes/./tests/types-tests.js"],"sourcesContent":["/**\n * @returns {Error}\n */\nexport function assertPrimitive(/** @type {() => Boolean} */ testFn) {\n    let err;\n\n    try {\n        const isTestPass = testFn();\n        if (!isTestPass)\n            throw Error(`Assert failure: ${testFn}`);\n    } catch (_err) {\n        err = _err;\n        err = Error(`[ASSERT FAILURE]`);\n    }\n\n    return err && err.message;\n}\n","import { assertTypePrimitive } from \"../utils/assertTypePrimitive\";\n\nexport class TBase {\n    /** \n     * @abstract\n     * @type {typeof TBase}\n     */\n    _primitive;\n\n    /**\n     * @abstract\n     * @type {Record<string, new (...args: TBase[]) => TBase>}\n     */\n    types = {};\n\n    /**\n     * @abstract\n     * @type {any} \n     */\n    _value = null;\n\n    /** @final */\n    set(/** @type {TBase} */ value) {\n        this.assert(value);\n\n        this._value = value;\n        return this;\n    }\n\n    /** \n     * @final\n     * @returns {TBase}\n     */\n    get() {\n        return this._value;\n    }\n\n    /** @abstract */\n    assert(/** @type {TBase} */ value) {\n        assertTypePrimitive(value, this._primitive);\n    }\n}","import { assertPrimitive } from './assertPrimitive';\n\nexport function assertTypePrimitive(\n    /** @type {TBase} */ instance,\n    /** @type {typeof TBase} */ type,\n) {\n    assertPrimitive(() => instance.constructor.name === type.name);\n}\n\n\n","import { assert } from \"../assert\";\nimport { TBase } from \"./TBase\";\n\nexport class TError extends TBase {\n    _primitive = String;\n\n    /** @override */\n    assert(/** @type {string} */ value) {\n        assert(() => value !== undefined);\n    }\n}","import { TError } from \"./types/TError\";\nimport { assertPrimitive } from \"./utils/assertPrimitive\";\n\nexport function assert(/** @type {() => Boolean} */ testFn) {\n    const err = assertPrimitive(testFn);\n    if (err) {\n        const errToThrow = (new TError()).set(err);\n        if (__DEV_DEBUG_TESTS__) {\n            console.error(errToThrow.get());\n            return;\n        }\n\n        throw errToThrow;\n    }\n}","import { assert } from '../src';\n\nfor (const value of [\n    '',\n    \"test\",\n    12,\n    'true',\n]) {\n    assert(() => ['true', 'false'].some(x => x === value));\n}","import { assert } from \"../assert\";\nimport { TBase } from \"./TBase\";\n\nexport class TBaseInteger extends TBase {\n    /** \n     * @override\n     * @type {typeof Number} \n     */\n    _primitive = Number;\n\n    /** @override */\n    assert(/** @type {Number} */ value) {\n        assert(() => Number.isInteger(value));\n        assert(() => value > -1);\n    }\n}","import { TBase } from \"./TBase\";\n\nexport class TBaseString extends TBase {\n    /** \n     * @override\n     * @type {typeof String} \n     */\n    _primitive = String;\n}","import { TBase } from \"./TBase\";\n\nexport class TBaseObject extends TBase {\n    /** \n     * @override\n     * @type {typeof Object} \n     */\n    _primitive = Object;\n}","import {\n    assert,\n    TError,\n    TBaseInteger,\n    TBaseString,\n    TBaseObject\n} from '../src';\n\nclass TWholeNumber extends TBaseInteger {\n    assert(value) {\n        super.assert(value);\n        assert(() => value >= 0);\n    }\n}\n\nconst x0 = new TWholeNumber();\nconsole.log(x0.get());\n\n/** @type {TWholeNumber} */\nconst x1 = new TWholeNumber().set('9');\nconsole.log(x1);\n\n/** @type {TWholeNumber} */\nconst x2 = new TWholeNumber().set(13);\nconsole.log(x2);\n\n/** @type {TWholeNumber} */\nconst x3 = new TWholeNumber().set(-4);\nconsole.log(x3);\n\nclass TUnformattedText extends TBaseString {\n    assert(value) {\n        super.assert(this);\n        assert(() => !!value);\n    }\n}\n\n/** Radio component option value **/\nclass TNumericRadioOption extends TBaseObject {\n    types = {\n        'value': TWholeNumber,\n        'label': TUnformattedText\n    };\n}\n\n/** @type {TNumericRadioOption} */\nconst x4 = new TNumericRadioOption().set({\n    value: new TWholeNumber().set(0),\n    label: new TUnformattedText().set(\"Option 0\"),\n});\nconsole.log(x4);\nconsole.log(x4.get().value);\nconsole.log(x4.get().value.get());\n\n/** @type {TNumericRadioOption} */\nconst x5 = new TNumericRadioOption().set({\n    value: new TWholeNumber().set(-1),\n    label: new TUnformattedText().set(\"[Please select]\"),\n});\nconsole.log(x5);\nconsole.log(x5.get().value);\nconsole.log(x5.get().value.get());\n\n/** @returns {[TWholeNumber, TError]} */\nfunction getOptionValue(/** @type {HTMLSelectElement} */ selectEl) {\n    let error = assert(() => !isNaN(selectEl.value), \"a whole number\", [selectEl.value]);\n\n    return [\n        selectEl.value ? new TWholeNumber().set(selectEl.value) : undefined,\n        error \n            || (selectEl.value ? undefined : new TError().set(\"No option selected\")),\n    ];\n}\n\nconst [x6, err6] = getOptionValue(document.querySelector('#pet-select'));\nconsole.log(x6, err6);\n\nif (err6) {\n    console.error('Error:', err6.get())\n}\n\nfunction onSelect(/** @type {Event} */ ev) {\n    assert(() => ev.type === 'change', \"has correct event type\", [ev.type]);\n    assert(() => ev.target.id === 'pet-select', \"has correct target element 'change'\", [ev.target.id]);\n\n    const [optionValue, err] = getOptionValue(ev.target);\n    console.log(optionValue);\n    console.log(err);\n}\n\ndocument.querySelector('#pet-select').addEventListener('change', onSelect);"],"names":["assertPrimitive","testFn","err","Error","_err","message","TBase","_primitive","types","_value","set","value","this","assert","get","instance","type","constructor","name","TError","String","undefined","some","x","TBaseInteger","Number","isInteger","TBaseString","TBaseObject","Object","TWholeNumber","super","x0","console","log","x1","x2","x3","TUnformattedText","TNumericRadioOption","x4","label","x5","getOptionValue","selectEl","error","isNaN","x6","err6","document","querySelector","addEventListener","ev","target","id","optionValue"],"sourceRoot":""}