var eviltypes;(()=>{"use strict";function e(e){let t;try{if(!e())throw Error(`Assert failure: ${e}`)}catch(e){t=e,t=Error("[ASSERT FAILURE]")}return t}class t{_primitive;types={};_value=null;set(e){return this.assert(e),this._value=e,this}get(){return this._value}assert(t){var s,o;s=t,o=this._primitive,e((()=>s.constructor.name===o.name))}}class s extends t{_primitive=String;assert(e){o((()=>void 0!==e))}}function o(t){const o=e(t);if(o){const e=(new s).set(o);if(__DEV_DEBUG_TESTS__)return void console.error(e.get().message);throw e}}for(const e of["","test",12,"true"])o((()=>["true","false"].some((t=>t===e))));class n extends t{_primitive=Number;assert(e){o((()=>Number.isInteger(e))),o((()=>e>-1))}}class l extends t{_primitive=String}class r extends t{_primitive=Object}class c extends n{assert(e){super.assert(e),o((()=>e>=0))}}const a=new c;console.log(a.get());const i=(new c).set("9");console.log(i);const u=(new c).set(13);console.log(u);const g=(new c).set(-4);console.log(g);class v extends l{assert(e){super.assert(this),o((()=>!!e))}}class p extends r{types={value:c,label:v}}const d=(new p).set({value:(new c).set(0),label:(new v).set("Option 0")});console.log(d),console.log(d.get().value),console.log(d.get().value.get());const w=(new p).set({value:(new c).set(-1),label:(new v).set("[Please select]")});function _(e){let t=o((()=>!isNaN(e.value)),e.value);return[e.value?(new c).set(e.value):void 0,t||(e.value?void 0:(new s).set("No option selected"))]}console.log(w),console.log(w.get().value),console.log(w.get().value.get());const[m,f]=_(document.querySelector("#pet-select"));console.log(m,f),f&&console.error("Error:",f.get()),document.querySelector("#pet-select").addEventListener("change",(function(e){o((()=>"change"===e.type),e.type),o((()=>"pet-select"===e.target.id),e.target.id);const[t,s]=_(e.target);console.log(t),console.log(s)})),eviltypes={}})();
//# sourceMappingURL=eviltypes.tests.bundle.js.map